#!/usr/bin/env bash
[[ ! -v ATOMF_BASHLIB ]] || return 0; ATOMF_BASHLIB=

# atomf <format> <atom>
#	Echoes back <atom> using <format>
#	%!(block)    %o(operator)
#	%c(category) %n(name)     %v(version) %r(-revision)
#	%s(:slot)    %u(/subslot) %b(bind)    %%(literal%)
#	Compounds:   %p(%c/%n)    %e(%v%r)    %f(%c/%n-%v%r)
#	Using %R, %S, %U will not add -r,:,/ and set to 0 if unset.
#	Return 2 without output if %c/%n/%v were requested but are unknown.
#	<atom> can be in dependency-format, e.g. !!>=cat/name-1.2.3-r1:*/0=[use]
#	See atomsp() and pversp() if need array with all values.
atomf() {
	local -a atom
	atomsp atom "${2}" || return ${?}
	vatomf "${1}" "${atom[@]}" || return ${?}
}

# vatomf <format> "${atom[@]}"
#	Same as atomf() but uses the array set by atomsp()
vatomf() {
	local s=${1} format=
	local -a args=()
	while [[ ${s} =~ (%[0-9.-]*)(.)(.*) ]]; do
		format+=${s%"${BASH_REMATCH[2]}${BASH_REMATCH[3]}"}
		s=${BASH_REMATCH[3]}
		case ${BASH_REMATCH[2]} in
			!) args+=("${2}");;
			o) args+=("${3}");;
			c) [[ ${4} ]] || return 2; args+=("${4}");;
			n) [[ ${5} ]] || return 2; args+=("${5}");;
			v) [[ ${6} ]] || return 2; args+=("${6}");;
			r) args+=("${7:+-r${7}}");;
			R) args+=("${7:-0}"); format+=d; continue;;
			s) args+=("${8:+:${8}}");;
			S) args+=("${8:-0}"); format+=d; continue;;
			u) args+=("${9:+/${9}}");;
			U) args+=("${9:-0}"); format+=d; continue;;
			b) args+=("${10}");;
			p) [[ ${4} && ${5} ]] || return 2; args+=("${4}/${5}");;
			e) [[ ${6} ]] || return 2; args+=("${6}${7:+-r${7}}");;
			f) [[ ${4} && ${5} && ${6} ]] || return 2; args+=("${4}/${5}-${6}${7:+-r${7}}");;
			%) format+=%;&
			*) continue;;
		esac
		format+=s
	done

	printf "${format}${s}" "${args[@]}"
}

# atomsp [array] <atom>
#	Split <atom> and set it to the array by name [array] (if defined)
#	[0](block)    [1](operator)
#	[2](category) [3](name)    [4](version) [5](revision)
#	[6](slot)     [7](subslot) [8](bind)
#	Elements will be set to empty if not present in <atom>
#	Return 1 and set nothing if atom format is invalid.
#	[use,...] in atom is discarded if present, but seen as valid.
atomsp() {
	# use bit of namespacing to avoid masking [array]
	local _a_s=${2-${1}}
	local -a _a_t=()

	[[ ${_a_s} =~ ^('!!'|'!'|'')(.*) ]] && _atomsptok || return 1
	[[ ${_a_s} =~ ^('<='|'<'|'='|'~'|'>='|'>'|'')(.*) ]] && _atomsptok || return 1

	# CATEGORY
	if [[ ${_a_s} =~ ^[^:]+/ ]]; then
		if [[ ! ${_a_s} =~ ^[+.-] && ${_a_s} =~ ^([A-Za-z0-9+_.-]+)/(.*) ]]; then
			_atomsptok
		else
			return 1
		fi
	else
		_a_t+=('')
	fi

	# PN and PVR
	local _a_v= _a_valid=
	if [[ ${_a_s} =~ ^-r([0-9]+)(.*) ]]; then
		if [[ ${_a_s} =~ ^-r([0-9]+)(.*) ]]; then
			_a_t+=('' '') # no PN, no PV, revision only
			_atomsptok
		else
			return 1
		fi
	else
		if [[ ${_a_s} =~ ^([0-9]+\.|-)([a-z0-9_.]+-r[0-9]+|[a-z0-9_.]+)(.*) ]]; then
			_a_v=${BASH_REMATCH[1]#-}${BASH_REMATCH[2]}
			if pversp "${_a_v}"; then
				_a_s=-${_a_s#-} # no PN (-0_p1 or 0.1 seen as PV, but 0_p1 is a valid PN)
				_a_valid=${_a_v}
			fi
		fi

		if [[ ! ${_a_valid} ]]; then
			local _a_p=${_a_s}
			while [[ ${_a_p} =~ ^[A-Za-z0-9+_]+-([A-Za-z0-9+_.]+-r[0-9]+|[A-Za-z0-9+_.]+)(.*) ]]; do
				_a_v=${BASH_REMATCH[1]}
				_a_p=${_a_v}${BASH_REMATCH[2]}
				! pversp "${_a_v}" || _a_valid=${_a_v} # keep going until last valid version string
			done
		fi

		if [[ ${_a_valid} ]]; then
			[[ ${_a_s} =~ ^([A-Za-z0-9+_-]*)-("${_a_valid%-r[0-9]*}")(-r[0-9]+|'')(.*) ]] && _atomsptok || return 1
			_a_t[5]=${_a_t[5]#-r}
		else
			[[ ${_a_s} =~ ^([A-Za-z0-9+_-]*)(.*) ]] && _atomsptok
			_a_t+=('' '') # no PVR
		fi

		# While no parsing issues, refuse PNs invalid per PMS
		# i.e. can't start with +-, can't end with hyphen then valid version (-1)
		[[ ! ${_a_t[3]} =~ ^[+-] ]] || return 1
		if [[ ${_a_t[3]} =~ .*-([0-9]+.*)$ ]]; then
			! pversp "${BASH_REMATCH[1]}" || return 1
		fi
	fi

	# SLOT (may also be :* as this is a dep-string check and not real SLOT)
	if [[ ! ${_a_s} =~ ^:[+.-] && ${_a_s} =~ ^:(\*|[A-Za-z0-9+_.-]*)(.*) ]]; then
		_atomsptok
	else
		_a_t+=('')
	fi

	# subslot
	if [[ ! ${_a_s} =~ ^/[+.-] && ${_a_s} =~ ^/([A-Za-z0-9+_.-]+)(.*) ]]; then
		_atomsptok
	else
		_a_t+=('')
	fi

	# binding operator
	[[ ${_a_s} =~ ^(=|'')(.*) ]] &&  _atomsptok || return 1

	# if ${_a_s} is not empty and has something other than ^[ or 2nd ^:, invalid
	[[ ! ${_a_s} || ${_a_s} =~ ^[:\[] ]] || return 1

	(( ${#} != 2 )) || eval "${1}"'=("${_a_t[@]}")'
}
_atomsptok() {
	_a_t+=("${BASH_REMATCH[@]:1:$((${#BASH_REMATCH[@]} - 2))}")
	_a_s=${BASH_REMATCH[*]: -1}
}

# pversp [array] <PV>
#	Split <PV> components and set to the array by name [array] (if defined)
#	Return false and set nothing if version is invalid.
#	No characters will be dropped, e.g.
#		0.1.2a_alpha3_p4-r5 -> 0 .1 .2 a _alpha 3 _p 4 -r5
pversp() {
	local _a_s=${2-${1}}
	local -a _a_t=()

	[[ ${_a_s} =~ ^([0-9]+)(.*) ]] || return 1
	_pversptok

	while [[ ${_a_s} =~ ^(\.[0-9]+)(.*) ]]; do
		_pversptok
	done

	[[ ! ${_a_s} =~ ^([a-z])(.*) ]] || _pversptok

	while [[ ${_a_s} =~ ^(_alpha|_beta|_pre|_rc|_p)([0-9]*)(.*) ]]; do
		_pversptok "${BASH_REMATCH[2]:+2}"
	done

	[[ ! ${_a_s} =~ ^(-r[0-9]+)(.*) ]] || _pversptok

	[[ ! ${_a_s} ]] || return 1

	(( ${#} != 2 )) || eval "${1}"'=("${_a_t[@]}")'
}
_pversptok() {
	_a_t+=("${BASH_REMATCH[@]:1:${1:-1}}")
	_a_s=${BASH_REMATCH[*]: -1}
}

# vim: ts=4
