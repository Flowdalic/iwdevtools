#!/usr/bin/env bash
set -euo pipefail
die() { echo "TestError: ${*} (${FUNCNAME[1]})" >&2; exit 1; }
skip() { echo "TestSkip: ${*}" >&2; exit 77; }

# arguments/env coming from meson
[[ ${#} == 4 && -f ${1} && ${2} && ${3} && -f ${4} && ${VERSION} ]] \
	|| die "invalid usage, attempted to use directly?"
TEST=${1}
WORKDIR=${2}
DATADIR=${3}
SCRIPT=${4}

# copydat <files...>
#	Copy data files to ${WORKDIR}
copydat() {
	cp "${@/#/${DATADIR}/}" .
}

# expect [options] <expected-glob> [args]
#	Return true if ${SCRIPT}'s output matches <expected-glob>
#	Options:
#		-2 compare with stderr instead of stdout
expect() {
	local stdout=true

	while (( ${#} )); do
		case ${1} in
			-2) stdout=false;;
			*) break;;
		esac
		shift
	done

	local output errno=0
	if ${stdout}; then
		output=$("${BASH}" "${SCRIPT}" "${@:2}") || errno=${?}
		echo "${output}"
	else
		{ output=$("${BASH}" "${SCRIPT}" "${@:2}" 3>&2 2>&1 1>&3-) || errno=${?}; } 2>&1
		echo "${output}" >&2
	fi

	eval "[[ \${output} == ${1// /\\ } ]]" || die "output mismatch for '${*}'"

	return ${errno}
}

# md5cmp <md5sum> <file>
#	Return true if <file> matches <md5sum>
md5cmp() {
	md5sum --quiet -c - <<<"${*}" >/dev/null || die "checksum mismatch for '${2}'"
}

# xfail <expected-errno>
#	Abort if last return value is not <expected-errno>
xfail() {
	local errno=${?}

	[[ ${errno} == ${1} ]] \
		|| die "expected return value ${1}, got ${errno}"
}

# setup per-test work dir in build dir, cleanup previous if exists
if [[ -f ${WORKDIR}/test-tmp-dir ]]; then
	rm -r "${WORKDIR}"
fi
mkdir "${WORKDIR}"
touch "${WORKDIR}"/test-tmp-dir # sanity file for safer `rm -r`

# run test in work dir
cd "${WORKDIR}"
. "${TEST}"

# vim: ts=4
