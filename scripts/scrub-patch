#!/usr/bin/env bash
version() { echo "${0##*/} @version@"; exit; }
usage() {
	cat <<-EOF
		${0##*/} [options] [patches]

		Strip patches of typically useless cruft such as "diff --git"
		lines and timestamps to reduce size and improve readability.

		Patches can be passed either as arguments or through stdin,
		and either modified in-place (i.e. sed(1)'s -i) or to stdout.

		Options:
		  -q, --quiet       Don't nag about possible QA issues
		  -n, --dry-run     Don't scrub and only nag about QA instead

		  -s, --no-sanity   Disable \`file\` check for if being misdetected

		  -c, --no-color    Disable use of colors

		  -h, --help        Display usage information and exit
		      --version     Display version information and exit
	EOF
	exit
}

set -u

die() { echo "Error (${0##*/}): ${*}" >&2; exit 1; }

# Dependencies:
#	sys-apps/coreutils (cat, mktemp, readlink, rm)
#	sys-apps/file (file)
#	sys-apps/sed (sed)
#	sys-apps/util-linux (getopt)
type cat file getopt mktemp readlink rm >/dev/null || die "missing dependencies"

declare -A OPT
OPT[quiet]=false
OPT[dry-run]=false
OPT[sanity]=true
OPT[color]=true

eval set -- $(getopt -o hqnsc -l help,version,quiet,dry-run,no-sanity,no-color -- "$@")
while [[ ${#} != 0 ]]; do
	case ${1} in
		-h|--help) usage;;
		   --version) version;;
		-q|--quiet) OPT[quiet]=true;;
		-n|--dry-run) OPT[dry-run]=true;;
		-s|--no-sanity) OPT[sanity]=false;;
		-c|--no-color) OPT[color]=false;;
		--) shift; break;;
	esac
	shift
done

# do basic sanity checks on supplied files, safety if going to use in-place
patches=()
while [[ ${#} != 0 ]]; do
	[[ -f ${1} ]] || die "'${1}' is not a valid file"
	if ${OPT[sanity]} && [[ $(file -bL "${1}") != 'unified diff output'* ]]; then
		die "'${1}' does not appear to be a unified format patch"
	fi
	patches+=(${1})
	shift
done

# devmanual's sed has a -i by default, try to preserve this behavior but
# will drop if input or output is detected to be stdin/stdout
stdin=$(readlink -m /proc/$$/fd/0) || die "readlink failed for stdin"
[[ -f ${stdin} || ${stdin##*/} == pipe:* ]] || stdin=
stdout=$(readlink -m /proc/$$/fd/1) || die "readlink failed for stdout"
[[ -f ${stdout} || ${stdout##*/} == pipe:* ]] || stdout=
inplace=-i
[[ ${stdin} || ${stdout} ]] && inplace=

# copy stdin to a temporary file, simplifies inspection and sed usage
if [[ ${stdin} ]]; then
	TMPIN=
	trap '[[ -e ${TMPIN} ]] && rm "${TMPIN}"' EXIT
	TMPIN=$(mktemp /tmp/.${0##*/}-XXXXXXXX) || die "mktemp failed"
	cat > "${TMPIN}" || die "writing to ${TMPIN} failed"
	exec <&-

	patches+=("${TMPIN}")
fi

[[ ${#patches[@]} != 0 ]] || die "no patches given"
[[ ${#patches[@]} -gt 1 && ! ${inplace} ]] && die "no support for multiple files when using stdin/stdout"

# save patch sizes for report
declare -i i=0
declare -ia oldsizes=() newsizes=()
for ((i=0; i < ${#patches[@]}; i++)); do
	oldsizes+=($(stat -c %s "${patches[i]}")) || die "stat failed for '${patches[i]}'"
done

if ! ${OPT[dry-run]}; then
	# Taken from vapier's clean patches howto (also in Gentoo's devmanual)
	#  - https://dev.gentoo.org/~vapier/clean-patches
	#  - https://devmanual.gentoo.org/ebuild-writing/misc-files/patches/index.html
	#
	# additions:
	#  - discard after '---' in header (git noise, e.g. N files changed, N deletion)
	#  - discard git version and empty lines '-- ' signature
	#  - similarity index, rename to/from (hopefully patch not meant for the tree)
	# modifications:
	#  - add space after ---/+++ and diff for extra safety
	#   (patches patching patches sometimes have ---- ++++)
	sed -e '/^index /d' \
		-e '/^new file mode /d' \
		-e '/^Index:/d' \
		-e '/^=========/d' \
		-e '/^RCS file:/d' \
		-e '/^retrieving/d' \
		-e '/^diff /d' \
		-e '/^Files .* differ$/d' \
		-e '/^Only in /d' \
		-e '/^Common subdirectories/d' \
		-e '/^deleted file mode [0-9]*$/d' \
		-e '/^+++ /s:\t.*::' \
		-e '/^--- /s:\t.*::' \
		-e '/^---$/,/^--- /{/^--- /!d}' \
		-e '/^-- $/,+3{/^-- $/d;/^[0-9]\.[0-9]/d;/^$/d}' \
		-e '/^similarity index /d' \
		-e '/^rename from /d' \
		-e '/^rename to /d' \
		${inplace} "${patches[@]}" || die "scrubbed too hard"
fi

exec >&2 # done with stdout which may be a file

declare -A C
if ${OPT[color]}; then
	C[n]=$(echo -e '\e[0m')
	C[r]=$(echo -e '\e[31m')
	C[g]=$(echo -e '\e[32m')
	C[y]=$(echo -e '\e[33m')
	C[a]=$(echo -e '\e[90m')
else
	C=([n]= [r]= [g]= [y]= [a]=)
fi

if ${OPT[dry-run]}; then
	newsizes=("${oldsizes[@]}")
	echo "Would scrub (dry-run):"
	if [[ ${stdin} ]]; then
		echo " - ${stdin}"
	else
		printf " - %s\n" "${patches[@]}"
	fi
else
	# get new sizes and give a report at same time (newsizes re-used for QA later)
	echo "Successfully scrubbed:"
	if [[ ${inplace} ]]; then
		for ((i=0; i < ${#patches[@]}; i++)); do
			newsizes[i]=$(stat -c %s "${patches[i]}") || die "stat failed for '${patches[i]}'"
			printf -- " - %s (%.2f%% reduction)\n" "${patches[i]}" $((10**4 - 10**4 * newsizes[i]/oldsizes[i]))e-2
		done
	else
		if [[ -f ${stdout} ]]; then
			newsizes[0]=$(stat -c %s "${stdout}") || die "stat failed for '${stdout}'"
			printf -- " - %s (%.2f%% reduction)\n" "${stdin:-${patches[0]}}" $((10**4 - 10**4 * newsizes[0]/oldsizes[0]))e-2
		else
			newsizes[0]=${oldsizes[0]}
			echo " - ${stdin:-${patches[0]}}"
		fi
	fi
	echo "Please verify that header(s) have not lost anything meaningful."
fi

${OPT[quiet]} && exit # nothing else to do

inspect() {
	qa() {
		local c
		if [[ ${3} == -* ]]; then
			c=${C[r]}
		elif [[ ${3} == +* ]]; then
			c=${C[g]}
		else
			c=${C[a]}
		fi
		printf "\n${C[y]}%03d: ${c}%s\n${C[a]}^^^${C[n]} %s\n" ${2} "${3}" "${1}"
	}
	qanl() {
		printf "\n${C[y]}>>>${C[n]} %s\n" "${1}"
	}

	local -i j=0 removed=0
	local crlf=false
	local header=true
	local header_http=false
	local header_text=false

	local l
	while IFS= read -r l; do
		j+=1

		[[ ${l} == ---\ * ]] && header=false

		if ${header}; then
			case ${l} in
				*[a-zA-Z]*) header_text=true;&
				*http:*|*https:*) header_http=true;;
			esac
			if [[ ${l} =~ ^From\ [a-z0-9]*\ .*\ ..:..:..\ .... ]]; then
				# if know the upstream it's easy to find but it's inconvenient
				qa "suggest replacing line with a http link pointing the upstream commit hash" ${j} "${l}"
			fi
		else
			case ${l} in
				---\ *)
					if [[ ${l} == ---\ /dev/null* ]]; then
						file_a=
					else
						if [[ ${l} != ---\ a/* ]]; then
							qa "does not start with a/ (-p1 and short git-style names)" ${j} "${l}"
						fi
						file_a=${l##*/}
						file_a=${file_a%%$'\t'*}

						if [[ ${file_a} == configure ]]; then
							qa "if this 'configure' is autotools-generated, it's preferable to patch"$'\n'"    configure.ac and use eautoreconf instead" ${j} "${l}"
						fi
					fi
				;;
				+++\ *)
					if [[ ${l} == +++\ /dev/null* ]]; then
						qa "is patch removing files? (how about using rm in the ebuild instead?)" ${j} "${l}"
					else
						if [[ ${l} != +++\ b/* ]]; then
							qa "does not start with b/ (-p1 and short git-style names)" ${j} "${l}"
						fi

						file_b=${l##*/}
						file_b=${file_b%%$'\t'*}
						if [[ ${file_a} && ${file_a} != "${file_b}" ]]; then
							qa "filename is different from previous line, is this a git-style rename?"$'\n'"   (this is not supported in normal patches and won't be renamed)" ${j} "${l}"
						fi
					fi
				;;
				# this one is hard to add given need to consider #include, #ifdef, etc..
#				+\#*\|+//*) # keep to minimum, characters could mean many things
#					qa "is patch inserting comments? (preferably useless lines should be removed"$'\n'"    and explanations go in patch header, unless it's meant to be upstreamed)" ${j} "${l}"
#				;;
				+*pkg-config*)
					# check for variable too in case of Makefile "PKG_CONFIG ?= pkg-config"
					if [[ ${l} != *PKG_CONFIG* ]]; then
						qa "should use PKG_CONFIG variable over a flat pkg-config call" ${j} "${l}"
					fi
				;;
				+*/usr*|+*/etc*|+*/var*)
					qa "seeing a potentially top-level path, is it respecting \${EPREFIX}?" ${j} "${l}"
				;;
				*$'\r') crlf=true;;
			esac

			if [[ ${l} == -* ]]; then
				removed+=1
				if [[ ${removed} == 20 ]]; then
					qa "over 20 lines are being removed, any chance to simplify? e.g. with 'if false'"$'\n'"   (disregard if meant to be upstreamed, go in SRC_URI, or would cause issues)" ${j} "${l}"
				fi
			else
				removed=0
			fi
		fi
	done < "${1}" || die "failed reading '${1}'"

	# checked by other tools, but check the 20kiB limit as a forewarning
	if [[ ${2} -gt 20480 ]]; then
		qanl "size greater than 20kiB, reminder that large patches should use SRC_URI"$'\n'"   (or be preferably upstreamed)"
	fi

	# hard to tell if it's a good header or not, but check for lack of effort
	${header_text} || qanl "empty header, usually good to have (at least) some short description"
	${header_http} || qanl "no links in header, verify if relevant bug links or upstream refs to add"

	${crlf} && qanl "note that the patch seems to have some \\r\\n line terminators, use care"$'\n'"    so they aren't accidentally lost"
}

for ((i=0; i < ${#patches[@]}; i++)); do
	qa=$(inspect "${patches[i]}" ${newsizes[i]})

	if [[ ${qa} ]]; then
		# only ever 1 patch if stdin, display non-tmpfile name
		if [[ ${stdin} ]]; then
			if [[ -f ${stdout} ]]; then
				patch=${stdout}
			else
				patch=${stdin}
			fi
		else
			patch=${patches[i]}
		fi
		echo
		echo "QA: ${patch} has generated warnings:"
		echo "${qa}"
	fi
done

if [[ ${qa} ]]; then
	echo
	echo "If patch is intended for the ::gentoo tree, would be good to review."
	echo "Note that these checks are tentative and cannot consider everything."
	echo "https://devmanual.gentoo.org/ebuild-writing/misc-files/patches/index.html"
fi

# vim: ts=4
