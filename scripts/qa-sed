#!/usr/bin/env bash
. "${0%/*}"/../lib/common.bashlib || exit 1 #C#
init
depend getopt readlink sed
usage <<-EOU
	Usage: ${0##*/} [sed options] [--qa-sed-args] [options]

	sed wrapper that reports when files were unmodified to help with
	detection of outdated constructs similarly to a failing patch.

	This is primarily meant to be integrated with portage rather than used
	on its own, see portage integration below.

	Options:
	      --qa-sed-args  Allow other options to be used and not passed to sed

	  -A, --all          By default (if --func is provided) sed commands not ran
	                     directly in defined phase functions are ignored to suppress
	                     noise from eclasses, this forces to show everything

	      --func=NAME    Function name sed command was called from
	      --source=FILE  Path to the source file calling sed
	      --lineno=NUM   Line number that called sed (for referencing)

	  -X, --error-on-qa  Return exit code >128 if QA issues rather than sed's own
	                     (will trigger \`|| die\` in ebuilds)

	      --confdir=PATH Configuration dir to use instead of defaults
	                     (@confdir@ + ${XDG_CONFIG_HOME:-~/.config}/@package@)
	      --dumpconfig   Display config and exit (> ${0##*/}.conf)

	  -h, --help         Display usage information and exit
	      --version      Display version information and exit

	*Caveats*
	 *  can't do detection if stdin/stdout is used and isn't a file
	    e.g. \`cat file | sed\` rather than \`sed < file\` (latter is fine)
	 *  can't handle multiple files being combined into a single file
	 *  can't detect if only one expression out of many is failing
	 *  does not know if a sed only replaces under specific conditions
	    e.g. 's|/usr|\${EPREFIX}/usr|', or 's|lib|\$(get_libdir)|'

	*Portage Integration*
	Can be integrated by using ${EROOT}/etc/portage/bashrc, either by using the
	example ${ROOT}@datadir@/bashrc or by manually adding:

	 >  source @datadir@/${0##*/}.bashrc

	Creates a sed() function that everything will use instead. Should, in
	theory, not break anything as it will call sed with same arguments even
	on error -- but use with caution nonetheless, not for production.

	bashrc environment options (export/make.conf/package.env):
	  QA_SED=y | =n         Enable or disable, can also use IWDT_ALL=y | =n
	  QA_SED_CMD=${0##*/}     This script, needs to be changed if not in PATH
	  QA_SED_ARGS=          Extra arguments to pass, see options above
	  QA_SED_LOG=eqawarn    Portage output command, can also use IWDT_LOG=ewarn
	Note: eqawarn post-emerge log needs "qa" in make.conf's PORTAGE_ELOG_CLASSES
EOU

setmsg 2 # this must not output anything to stdout if running sed

# split sed's and our own arguments
SED_ARGV=()
while (( ${#} )); do
	if [[ ${1} == --qa-sed-args ]]; then
		shift
		break
	fi
	SED_ARGV+=("${1}")
	shift
done

# setup end()/die() hook before looking at options
sed-run() {
	sed "${SED_ARGV[@]}"
}

QA_ERRNO=
sed-get_errno() {
	if ${O[error-on-qa]} && [[ ${QA_ERRNO} ]]; then
		echo "${QA_ERRNO}"
	else
		echo "${1}"
	fi
}

hook_end() {
	sed-run
	exit "$(sed-get_errno ${?})"
}

optauto args "${@}" <<-EOO
	A|all=bool:false
	func=str:
	lineno=int:
	source=str:
	error-on-qa=bool:false
EOO
unset args

sed-is_defined_phase() {
	[[ ${O[func]} ]] || return 0 # assume yes if nothing to compare

	local def func
	def=" ${DEFINED_PHASES:-} " # exported by portage
	func=${O[func]#src_}
	func=${func#pkg_}

	[[ ${def} == *\ ${func}\ * ]]
}

sed-qa() {
	QA_ERRNO=${1}
	shift

	msg "SED: ${*}"

	if [[ ${O[source]} && ${O[lineno]} ]]; then
		# display sed line from source file
		showline "${O[lineno]}" "${O[source]}" %s >&2
	else
		# if no source, display rough expanded arguments
		msg "sed ${SED_ARGV[*]}"
	fi
}

# ignore if (probably) called from an eclass
# TODO: find a better way and not ignore non-eclass functions
! ${O[all]} && ! sed-is_defined_phase && end

# Need to construct a file list from arguments given to sed. For this,
# check for known GNU sed options with arguments to recognize it as not
# being a file. This is not explicitely necessary due to the read test
# (see below), but is an added safety (notably for --file).
inplace=false
getoptw -n arg args \
	hie:f:l: \
	help,version,in-place,expression:,file:,line-length: \
	"${SED_ARGV[@]}" 2>/dev/null # ignore errors from other arguments
while getoptw; do
	case ${arg} in
		-h|--help) usage;; # assume it was meant for us
		--version) version;;
		-i|--in-place) inplace=true;;
	esac
done
set -- "${args[@]}"; unset args

in=()
while (( ${#} )); do
	# if not readable, assume it's a sed expression without -e
	[[ -r ${1} ]] && in+=("${1}")
	shift
done

# keep a copy of current files in memory (avoids temporary files)
declare -i c
for ((c=0; c < ${#in[@]}; c++)); do
	copy[c]=$(<"${in[c]}") || die "failed reading '${in[c]}'"
done

# check if stdin is pointing to a real file
stdin=$(readlink -m /proc/self/fd/0) || die "readlink failed"
[[ -f ${stdin} ]] || stdin=

if ${inplace}; then
	if [[ ${stdin} ]]; then
		# `sed -i < file` doesn't make sense, warn about it
		# unfortunately, also checking for `sed -i > file` is unreliable
		sed-qa 130 "the following uses -i with stdin"
		end
	fi

	sed-run || exit ${?}
	errno=${?}

	# compare all files
	for ((c=0; c < ${#in[@]}; c++)); do
		in[c]=$(<"${in[c]}") || die "failed reading '${in[c]}'"
		[[ ${in[c]} != "${copy[c]}" ]] && exit ${errno} # changes found
	done

	sed-qa 129 "the following did not cause any changes"
	exit "$(sed-get_errno ${errno})"
else
	# ignore situations can't handle easily
	if [[ ${stdin} && ! -r ${stdin} ]]		|| # stdin not readable
		[[ ! ${stdin} && ${#in[@]} == 0 ]]	|| # no input files, or `cat | sed`
		[[ ${stdin} && ${#in[@]} != 0 ]]	|| # sed file1 < file2 > file3
		(( ${#in[@]} > 1 )); then			   # sed file1 file2 > file3
		end
	fi

	# do a dummy run to compare with stdout
	if [[ ${stdin} ]]; then
		copy[0]=$(<"${stdin}") || die "failed reading '${stdin}'"
		copy[1]=$(sed-run < "${stdin}") || die "'sed-run < ${stdin}' failed"
	else
		copy[1]=$(sed-run) || die "sed-run failed"
	fi

	if [[ ${copy[0]} == "${copy[1]}" ]]; then
		sed-qa 129 "the following did not cause any changes"
	fi

	end
fi

# vim: ts=4
